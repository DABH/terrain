// Copyright 2018 Terrain Data, Inc.

double pwlTransform(def ranges, def outputs, def input)
{
  if (ranges.length == 0)
  {
    return 1;
  }

  if (input <= ranges[0])
  {
    return outputs[0];
  }
  
  if (input >= ranges[ranges.length - 1])
  {
    return outputs[outputs.length - 1];
  }
  
  int range = Collections.binarySearch(ranges, input,
    (lhs, rhs) -> (lhs < rhs ? -1 : (lhs == rhs ? 0 : 1)));
  
  if (range < 0)
  {
    range = -range - 1;
  }
  
  def low = ranges[range - 1];
  def high = ranges[range];
  double pos = (input - low) / (double)(high - low);
  def a = outputs[range - 1];
  def b = outputs[range];
  return a + (b - a) * pos;
}

double accumulateFactors(def doc, List factors, double offset, def _score)
{
  double acc = offset;
  def range = 0;
  for (List element : factors)
  {
    if (element[0].equals(""))
    {
      continue;
    }

    def sourceValue;
    if (element[0].equalsIgnoreCase("_score"))
    {
      sourceValue = _score;
    }
    else
    {
      sourceValue = doc[element[0]].value;
    }

    def value;
    if (!(sourceValue instanceof Number))
    {
      value = sourceValue.getMillis();
    }
    else
    {
      value = sourceValue;
    }

    acc += element[1] * value;
  }
  return acc;
}

List factors = params.factors;
double total = 0.0;
for (int i = 0; i < factors.length; ++i)
{
  Map factor = factors[i];
  double weight = factor['weight'];
  if (weight == 0)
  {
    continue;
  }
  def numerator;
  if (factor['isDistance'])
  {
    def location = doc[factor['numerators'][0][0]];
    // Compute distance to miles from meters (factor is 0.000621371)
    numerator = location.planeDistance(factor['lat'], factor['lon']) * 0.000621371;
  }
  else
  {
    numerator = accumulateFactors(doc, factor['numerators'], factor['a'], _score);
  }
  double denominator = accumulateFactors(doc, factor['denominators'], factor['b'], _score);
  double input = numerator / denominator;
  double output = pwlTransform(factor.ranges, factor.outputs, input);
  total += weight * output;
}

return total;