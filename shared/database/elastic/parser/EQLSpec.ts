/*
University of Illinois/NCSA Open Source License 

Copyright (c) 2018 Terrain Data, Inc. and the authors. All rights reserved.

Developed by: Terrain Data, Inc. and
              the individuals who committed the code in this file.
              https://github.com/terraindata/terrain
                  
Permission is hereby granted, free of charge, to any person 
obtaining a copy of this software and associated documentation files 
(the "Software"), to deal with the Software without restriction, 
including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, 
and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

* Redistributions of source code must retain the above copyright notice, 
  this list of conditions and the following disclaimers.

* Redistributions in binary form must reproduce the above copyright 
  notice, this list of conditions and the following disclaimers in the 
  documentation and/or other materials provided with the distribution.

* Neither the names of Terrain Data, Inc., Terrain, nor the names of its 
  contributors may be used to endorse or promote products derived from
  this Software without specific prior written permission.

This license supersedes any copyright notice, license, or related statement
following this comment block.  All files in this repository are provided
under the same license, regardless of whether a corresponding comment block
appears in them.  This license also applies retroactively to any previous
state of the repository, including different branches and commits, which
were made public on or after December 8th, 2018.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH
THE SOFTWARE.
*/

// Copyright 2017 Terrain Data, Inc.

import ESAnyClause from './clauses/ESAnyClause';
import ESArrayClause from './clauses/ESArrayClause';
import ESBaseClause from './clauses/ESBaseClause';
import ESBooleanClause from './clauses/ESBooleanClause';
import ESClause from './clauses/ESClause';
import ESEnumClause from './clauses/ESEnumClause';
import ESFieldClause from './clauses/ESFieldClause';
import ESIndexClause from './clauses/ESIndexClause';
import ESMapClause from './clauses/ESMapClause';
import ESNullClause from './clauses/ESNullClause';
import ESNumberClause from './clauses/ESNumberClause';
import ESObjectClause from './clauses/ESObjectClause';
import ESPropertyClause from './clauses/ESPropertyClause';
import ESReferenceClause from './clauses/ESReferenceClause';
import ESScriptClause from './clauses/ESScriptClause';
import ESStringClause from './clauses/ESStringClause';
import ESStructureClause from './clauses/ESStructureClause';
import ESTypeClause from './clauses/ESTypeClause';
import ESVariantClause from './clauses/ESVariantClause';
import ESWildcardStructureClause from './clauses/ESWildcardStructureClause';
/* tslint:disable:max-line-length */

const EQLSpec: ESClause[] =
  [
    new ESAnyClause('any', {
      path: ['value'],
      desc: 'Any valid JSON value.',
      url: 'http://www.json.org/',
    }),
    new ESBaseClause('base',
      {
        name: 'value',
        path: ['value'],
        desc: 'A null, boolean, number, or string value.',
        url: 'http://www.json.org/',
      }),
    new ESNullClause('null', {
      path: ['value'],
      desc: 'A null value.',
      url: 'http://www.json.org/',
    }),
    new ESBooleanClause('boolean', {
      path: ['value'],
      desc: 'A boolean, either true or false.',
      url: 'http://www.json.org/',
    }),
    new ESNumberClause('number',
      {
        path: ['value'],
        desc: 'A number. Numbers must begin with either \'-\', or a digit. For decimals type the leading zero (0.1234). For scientific notation use e or E to indicate the order of magnitude (1.23e10).',
        url: 'http://www.json.org/',
      }),
    new ESStringClause('string',
      {
        path: ['value'],
        desc: 'A string. Strings are enclosed in double quotes ("example string"). Quotes and other special symbols can be encoded by escaping them. See json.org for more information.',
        url: 'http://www.json.org/',
      }),
    new ESStringClause('time_string',
      {
        path: ['value'],
        desc: 'A string that represents a duration of time with a number followed by an elasticsearch time unit. 30m is thirty minutes, 2d is two days, and so on.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html#time-units',
      }),
    new ESStringClause('timezone_string',
      {
        path: ['value'],
        desc: 'A string that represents a timezone: UTC, a timezone id (PDT etc.), or a local independent fixed offset [+-]hh:mm.',
      }),
    new ESObjectClause('object',
      {
        path: ['value'],
        desc: 'A JSON object. Objects consist of name : value pairs enclosed in curly braces and separated by commas. See json.org for more information.',
        url: 'http://www.json.org/',
      }),
    new ESPropertyClause('property',
      {
        path: ['value'],
      }),
    new ESFieldClause('field',
      {
        name: 'field',
        path: ['value'],
        desc: 'The name of a document field.',
      }),
    new ESEnumClause('field_type',
      [
        'string',
        'number',
        'integer',
        'date',
        'boolean',
        'text',
        'keyword',
        'long',
        'short',
        'byte',
        'double',
        'float',
        'half_float',
        'scaled_float',
        'binary',
        'integer_range',
        'float_range',
        'long_range',
        'double_range',
        'date_range',
        'object',
        'nested',
        'geo_point',
        'geo_shape',
        'ip',
        'completion',
        'token_count',
        'murmur3',
        'attachment',
        'percolator',
      ],
      {}),
    new ESEnumClause('distance_unit',
      [
        'mi',
        'yd',
        'ft',
        'in',
        'km',
        'm',
        'cm',
        'mm',
        'nmi',
        'miles',
        'yards',
        'feet',
        'inch',
        'kilometers',
        'meters',
        'centimeters',
        'millimeters',
        'nauticalmiles',
        'NM',
      ],
      {}),
    // node_modules/elasticsearch/src/lib/apis/6_x.js
    new ESStructureClause('root',
      {
        index: 'index',
        type: 'type',
        from: 'from',
        size: 'size',
        body: 'body',
      },
      {
        name: 'root clause',
        path: ['primary'],
        desc: 'The outermost clause object that contains an entire search query.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html',
        suggestions: ['body', 'index', 'type', 'from', 'size'],
      }),
    new ESIndexClause('index',
      {
        path: ['control'],
        desc: 'Selects which index to search.',
        template: '',
      },
    ),
    new ESTypeClause('type', {
      path: ['control'],
      desc: 'Selects which type to search.',
    }),
    new ESNumberClause('from',
      {
        path: ['control'],
        desc: 'How many results to skip over. This is usually used to implement pagination.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-from-size.html',
      }),
    new ESNumberClause('size',
      {
        path: ['control'],
        desc: 'How many results to return.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-from-size.html',
        template: '1000',
      }),
    new ESEnumClause('explain_wildcards',
      ['open', 'closed', 'none', 'all'],
      {
        path: ['control'],
        desc: 'Explain wildcards.',
        template: 'open',
      }),
    new ESStructureClause('body',
      {
        query: 'query', // object
        sort: 'sort_clause',  // value or object or array
        script_fields: 'script_fields', // object
        aggregations: 'aggs_query',
        from: 'from', // value
        size: 'size', // value
        timeout: 'time_string', // value
        terminate_after: 'number', // value
        min_score: 'number',
        version: 'version',
        explain: 'explain',
        track_scores: 'track_scores',
        _source: '_source', // value or object or array
        stored_fields: 'field[]', // value or array
        profile: 'boolean',
        post_filter: 'post_filter', // object
        indices_boost: 'index_boost[]', // array
        aggs: 'aggs_query',
        highlight: 'highlight',
        suggest: 'suggest',
        rescore: 'rescore', // object or array
        slice: 'slice', // object
        collapse: 'collapse', // TODO: continue adding from here object
        script: 'script',
        docvalue_fields: 'field[]', // array
        stats: 'number[]',
        search_after: 'search_after',
        ignore_failure: 'boolean',
        all_fields: 'boolean',
        // ext: 'ext', not much documents about the usage of this ext
        //        _name: 'query_name',
        //        inner_hits: 'inner_hits',
        //      cutoff_frequency: 'cutoff_frequency',
        //        minimum_should_match: 'minimum_should_match',
      },
      {
        name: 'body',
        path: ['primary'],
        desc: 'The object containing the filtering, sorting, matching, and aggregation logic for a query.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html',
        template: {
          'query:query': {
            'bool:elasticFilter': null,
          },
          'sort:elasticScore': null,
          'from:from': 0,
          'size:size': 1000,
        },
        suggestions: ['query', 'sort', 'from', 'size'],
      }),
    new ESStructureClause('slice',
      {
        field: 'field',
        id: 'number',
        max: 'number',
      },
      {
        path: ['primary'],
        name: 'slice',
        desc: 'A slice allowing to split a scroll in multiple partitions',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html',
      }),
    // aggregation
    // AggregatorFactories.java
    new ESMapClause('aggs_query',
      'aggregation_name',
      'aggregation_builder',
      {
        path: ['aggregation'],
        name: 'aggregation query',
        desc: 'Create and name an aggregation query.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html#_structuring_aggregations',
      }),
    new ESStringClause('aggregation_name',
      {
        path: ['aggregation'],
        desc: 'names this aggregation, must be alpha-numeric and can only contain \'_\' and \'-\'',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html#_structuring_aggregations',
      }),
    new ESStructureClause('aggregation_builder',
      {
        aggs: 'aggs_query',
        aggregations: 'aggs_query',
        avg: 'metric_avg',
        cardinality: 'metric_cardinality',
        extended_stats: 'metric_extend_stats',
        geo_bounds: 'metric_geo_bounds',
        centroid: 'metric_centroid',
        percentiles: 'metric_percentiles',
        percentile_ranks: 'metric_percentiles',
        stats: 'metric_stats',
        sum: 'metric_sum',
        top_hits: 'inner_hits',
        value_count: 'metric_value_count',
        scripted_metric: 'scripted_metric',
        max: 'metric_max',
        min: 'metric_min',
        filters: 'bucket_filters',
        filter: 'bucket_filter',
        adjacency_matrix: 'bucket_adjacency',
        histogram: 'bucket_histogram',
        date_histogram: 'bucket_date_histogram',
        range: 'bucket_range',
        date_range: 'bucket_date_range',
        ip_ranges: 'bucket_ip_range',
        geo_distance: 'bucket_geo_distance',
        geohash_grid: 'bucket_geohash_grid',
        sampler: 'bucket_sampler',
        terms: 'bucket_terms',
        significant_terms: 'bucket_significant_terms',
        children: 'bucket_children',
        diversified_sampler: 'bucket_diversified_sampler',
        global: 'bucket_global',
        missing: 'bucket_missing',
        nested: 'bucket_nested',
        reverse_nested: 'bucket_reverse_nested',
      },
      {
        path: ['aggregations'],
        desc: 'Provides aggregated data based on the aggregation query.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html#_structuring_aggregations.',
      }),
    new ESStructureClause('bucket_terms',
      {
        field: 'field', // any field
        size: 'number',
        shard_size: 'number',
        order: 'terms_order',
        min_doc_count: 'number',
        shard_min_doc_count: 'number',
        execution_hint: 'string',
        include: 'include_values',
        exclude: 'exclude_values',
        collect_mode: 'collect_mode',
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A multi-bucket value source based aggregation where buckets are dynamically built - one per unique value.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-terms-aggregation.html',
      }),
    new ESEnumClause('collect_mode',
      [
        'breadth_first',
        'depth_first',
      ],
      {
        path: ['aggregation', 'bucket'],
        desc: 'Deferring calculation of child aggregations',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-terms-aggregation.html#_collect_mode',
      }),
    new ESMapClause('terms_order',
      'terms_order_key',
      'sort_order',
      {
        path: ['aggregation', 'bucket'],
        desc: 'Controls the order of the buckets.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-order',
      },
    ),
    new ESEnumClause('terms_order_key',
      [
        '_term',
        '_count',
      ],
      {
        path: ['aggregation', 'bucket'],
        desc: 'Controls the order of the buckets.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-order',
      }),
    new ESVariantClause('include_values',
      {
        string: 'terms_filter_regular_string',
        array: 'terms_filter_string[]',
        object: 'terms_filter_partition',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Includes the values for which buckets will be created.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-terms-aggregation.html#_filtering_values_2',
      }),
    new ESVariantClause('exclude_values',
      {
        string: 'terms_filter_regular_string',
        array: 'terms_filter_string[]',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Excludes the values for which buckets will be created.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-terms-aggregation.html#_filtering_values_2',
      }),
    new ESStringClause('terms_filter_regular_string',
      {
        path: ['aggregation', 'bucket'],
        desc: 'Filters the values with a regular expression string, such as ".*sport.*".',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-terms-aggregation.html#_filtering_values_2',
      }),
    new ESStringClause('terms_filter_string',
      {
        path: ['aggregation', 'bucket'],
        desc: 'Filters the values with a exact string, such as "mazda".',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-terms-aggregation.html#_filtering_values_with_exact_values',
      }),
    new ESStructureClause('terms_filter_partition',
      {
        partition: 'number',
        num_partitions: 'number',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Groups the field’s values into a number of partitions at query-time and processing only one partition in each request.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-terms-aggregation.html#_filtering_values_with_partitions',
      },
    ),
    new ESStructureClause('bucket_range',
      {
        field: 'field', // numerical field
        ranges: 'ranges_number[]',
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
        keyed: 'boolean',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A multi-bucket value source based aggregation that enables the user to define a set of ranges - each representing a bucket.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations-bucket-range-aggregation.html',
      },
    ),
    new ESStructureClause('bucket_date_range',
      {
        field: 'field', // geo field
        ranges: 'ranges_time[]',
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
        keyed: 'boolean',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A multi-bucket value source based aggregation that enables the user to define a set of date ranges - each representing a bucket.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-daterange-aggregation.html',
      },
    ),
    new ESStructureClause('bucket_missing',
      {
        field: 'field', // geo field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Creates a bucket of all documents in the current document set context that are missing a field value',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-missing-aggregation.html',
      },
    ),
    new ESStructureClause('bucket_nested',
      {
        path: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A special single bucket aggregation that enables aggregating nested documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-nested-aggregation.html',
      },
    ),
    new ESStructureClause('bucket_reverse_nested',
      {
        path: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A special single bucket aggregation that enables aggregating on parent docs from nested documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-reverse-nested-aggregation.html',
      },
    ),
    new ESStructureClause('bucket_ip_range',
      {
        field: 'field', // ip field
        ranges: 'ranges_ip[]',
        missing: 'number',
        value_type: 'string',
        keyed: 'boolean',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A multi-bucket value source based aggregation that enables the user to define a set of IP ranges - each representing a bucket.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-iprange-aggregation.html',
      },
    ),
    new ESStructureClause('bucket_geo_distance',
      {
        field: 'field', // numerical field
        origin: 'geo_point_type',
        ranges: 'ranges_number[]',
        unit: 'distance_unit',
        distance_type: 'string', // plane, etc.
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
        keyed: 'boolean',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A multi-bucket aggregation that works on geo_point fields and conceptually works very similar to the range aggregation.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-daterange-aggregation.html#date-format-pattern',
      },
    ),
    new ESStructureClause('bucket_geohash_grid',
      {
        field: 'field', // numerical field
        precision: 'number',
        size: 'number',
        shard_size: 'number',
        missing: 'number',
        value_type: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A multi-bucket aggregation that works on geo_point fields and groups points into buckets that represent cells in a grid.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-geohashgrid-aggregation.html',
      },
    ),
    new ESStructureClause('bucket_global',
      {
        // global is an empty object, and only can be placed as top level aggregators.
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Defines a single bucket of all the documents within the search execution context. This context is defined by the indices and the document types you’re searching on, but is not influenced by the search query itself.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-global-aggregation.html',
      }),
    new ESStructureClause('bucket_sampler',
      {
        shard_size: 'number',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A filtering aggregation used to limit any sub aggregations\' processing to a sample of the top-scoring documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-sampler-aggregation.html',
      }),
    new ESStructureClause('bucket_significant_terms',
      {
        shard_size: 'number',
        min_doc_count: 'number',
        shard_min_doc_count: 'number',
        size: 'number',
        execution_hint: 'string',
        background_filter: 'query',
        include: 'include_values',
        exclude: 'exclude_values',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'An aggregation that returns interesting or unusual occurrences of terms in a set.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-significantterms-aggregation.html',
      }),
    new ESStructureClause('ranges_number',
      {
        to: 'number',
        from: 'number',
        key: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        name: 'To From',
        desc: 'Ranges for buckets of a range aggregation',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations-bucket-range-aggregation.html',
      }),
    new ESStructureClause('ranges_time',
      {
        to: 'string',
        from: 'string',
        key: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        name: 'To From',
        desc: 'Ranges for buckets of time.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-daterange-aggregation.html#date-format-pattern',
      }),
    new ESStructureClause('ranges_ip',
      {
        to: 'string',
        from: 'string',
        key: 'string',
        mask: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        name: 'To From',
        desc: 'Ranges for buckets of ip addresses.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-iprange-aggregation.html',
      }),
    new ESStructureClause('geo_point_object',
      {
        lat: 'number',
        lon: 'number',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Object format of geo_point type, like { "lat" : 52.376, "lon" : 4.894 }.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/geo-point.html',
      }),
    new ESStringClause('geo_point_string',
      {
        path: ['aggregation', 'bucket'],
        desc: 'String format of geo_point type: "lat,lon"',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/geo-point.html',
      }),
    new ESReferenceClause('geo_point_array',
      'number[]',
      {
        path: ['aggregation', 'bucket'],
        desc: 'Array format of geo_point type: [ lat, lon]',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/geo-point.html',
      }),
    new ESVariantClause('geo_point_type',
      {
        string: 'geo_point_string',
        object: 'geo_point_object',
        array: 'geo_point_array',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'geo_point type can be expressed as an object, an array, or a string',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/geo-point.html',
      }),
    new ESStructureClause('bucket_histogram',
      {
        field: 'field', // numeric field
        offset: 'number',
        interval: 'number',
        min_doc_count: 'number',
        extended_bounds: 'extended_bounds',
        order: 'histogram_order',
        missing: 'number',
        keyed: 'boolean',
        value_type: 'string',
        script: 'script',
        format: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A multi-bucket values source based aggregation that can be applied on numeric values extracted from the documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-histogram-aggregation.html',
      }),
    new ESStructureClause('bucket_date_histogram',
      {
        field: 'field', // numeric field
        offset: 'number',
        interval: 'time_string',
        min_doc_count: 'number',
        extended_bounds: 'extended_bounds',
        order: 'histogram_order',
        missing: 'number',
        keyed: 'boolean',
        value_type: 'string',
        script: 'script',
        format: 'string',
        timezone: 'timezone_string',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A multi-bucket values source based aggregation that can be applied on date values extracted from the documents',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-histogram-aggregation.html',
      }),
    new ESMapClause('histogram_order',
      'histogram_order_key',
      'sort_order',
      {
        path: ['aggregation', 'bucket'],
        desc: 'Controls how the returned buckets are sorted.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-histogram-aggregation.html#_order',
      },
    ),
    new ESEnumClause('histogram_order_key',
      [
        '_key',
        '_count',
      ],
      {
        path: ['aggregation', 'bucket'],
        desc: 'Controls the order of returned buckets by their key or doc_count.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-histogram-aggregation.html#_order',
      }),
    new ESStructureClause('extended_bounds',
      {
        min: 'number',
        max: 'number',
      },
      {
        path: ['extended_bounds'],
        desc: 'Bounds for buckets of a histogram aggregation',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-histogram-aggregation.html',
      }),
    // AvgAggregationBuilder.java
    // ValuesSourceParserHelper.declareNumericFields(PARSER, true, true, false);
    new ESStructureClause('metric_avg',
      {
        field: 'field', // numerical field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A single-value metrics aggregation that computes the average of numeric values that are extracted from the aggregated documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-avg-aggregation.html',
      }),
    // CardinalityAggregationBuilder.java
    // ValuesSourceParserHelper.declareAnyFields(PARSER, true, false);
    // PARSER.declareLong(CardinalityAggregationBuilder::precisionThreshold, CardinalityAggregationBuilder.PRECISION_THRESHOLD_FIELD);
    new ESStructureClause('metric_cardinality',
      {
        field: 'field', // any field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        precision_threshold: 'number',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A single-value metrics aggregation that calculates an approximate count of distinct values.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-cardinality-aggregation.html#_counts_are_approximate',
      }),
    // ExtendedStatsAggregationBuilder.java
    //        ValuesSourceParserHelper.declareNumericFields(PARSER, true, true, false);
    // PARSER.declareDouble(ExtendedStatsAggregationBuilder::sigma, ExtendedStatsAggregator.SIGMA_FIELD);
    new ESStructureClause('metric_extend_stats',
      {
        field: 'field', // numerical field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
        sigma: 'number',
      },
      {
        name: 'extend stats aggregation',
        path: ['aggregation', 'metric'],
        desc: 'A multi-value metrics aggregation that computes stats over numeric values extracted from the aggregated documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-avg-aggregation.html',
      }),

    new ESStructureClause('metric_geo_bounds',
      {
        field: 'field', // GEOPOINT field
        missing: 'number',
        value_type: 'string',
        wrap_longitude: 'boolean',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A metric aggregation that computes the bounding box containing all geo_point values for a field.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-geobounds-aggregation.html',
      }),

    new ESStructureClause('metric_centroid',
      {
        field: 'field', // GEOPOINT field
        missing: 'number',
        value_type: 'string',
        script: 'script',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A metric aggregation that computes the weighted centroid from all coordinate values for a Geo-point datatype field.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-geocentroid-aggregation.html',
      }),

    new ESStructureClause('metric_max',
      {
        field: 'field', // numerical field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A single-value metrics aggregation that keeps track and returns the maximum value.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-max-aggregation.html',
      }),

    new ESStructureClause('metric_value_count',
      {
        field: 'field', // any field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A single-value metrics aggregation that counts the number of values that are extracted from the aggregated documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-valuecount-aggregation.html',
      }),

    new ESStructureClause('metric_min',
      {
        field: 'field', // numerical field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A single-value metrics aggregation that keeps track and returns the minimum value.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-min-aggregation.html',
      }),

    new ESStructureClause('metric_percentiles',
      {
        field: 'field', // numerical field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
        percents: 'number[]', // double array
        keyed: 'boolean',
        tdigest: 'percentiles_tdigest',
        hdr: 'percentiles_hdr',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A multi-value metrics aggregation that calculates one or more percentiles over numeric values extracted from the aggregated documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-percentile-aggregation.html',
      }),

    new ESStructureClause('percentiles_tdigest',
      {
        compression: 'number',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'Compression controls memory usage and approximation error',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-percentile-aggregation.html#search-aggregations-metrics-percentile-aggregation-compression',
      }),

    new ESStructureClause('percentiles_hdr',
      {
        number_of_significant_value_digits: 'number',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'Uses HDR Histogram to compute percentiles.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-percentile-aggregation.html#_hdr_histogram',
      }),

    new ESStructureClause('scripted_metric',
      {
        init_script: 'script',
        map_script: 'script',
        combine_script: 'script',
        reduce_script: 'script',
        params: 'script_params',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A metric aggregation that executes using scripts to provide a metric output. (experimental)',
        url: 'A metric aggregation that executes using scripts to provide a metric output.',
      }),
    new ESStructureClause('metric_stats',
      {
        field: 'field', // numeric field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A multi-value metrics aggregation that computes stats over numeric values extracted from the aggregated documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-stats-aggregation.html',
      }),
    new ESStructureClause('metric_sum',
      {
        field: 'field', // numeric field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        format: 'string',
      },
      {
        path: ['aggregation', 'metric'],
        desc: 'A single-value metrics aggregation that sums up numeric values that are extracted from the aggregated documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-metrics-sum-aggregation.html',
      }),

    new ESStructureClause('bucket_filter',
      {
        filter: 'query',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Defines a single bucket of all the documents in the current document set context that match a specified filter.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-filter-aggregation.html',
      }),

    new ESStructureClause('bucket_filters',
      {
        other_bucket_key: 'boolean',  // false default
        other_bucket: 'string', // "_other_"
        filters: 'aggregation_filters',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Defines a multi bucket aggregation where each bucket is associated with a filter. Each bucket will collect all documents that match its associated filter.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-filters-aggregation.html',
      }),

    new ESVariantClause('aggregation_filters',
      {
        object: 'keyed_filters',
        array: 'anonymous_filters',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Lists filters.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-filters-aggregation.html#search-aggregations-bucket-filters-aggregation',
      }),

    new ESMapClause('keyed_filters',
      'string',
      'query',
      {
        path: ['aggregation', 'bucket'],
        desc: 'A named filter.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-filters-aggregation.html#search-aggregations-bucket-filters-aggregation',
      }),

    new ESReferenceClause('anonymous_filters',
      'query[]',
      {
        path: ['aggregation', 'bucket'],
        desc: 'An anonymous filter.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-filters-aggregation.html#_anonymous_filters',
      }),

    new ESStructureClause('bucket_adjacency',
      {
        filters: 'aggregation_filters',
        separator: 'query_string_default_operator',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A bucket aggregation returning a form of adjacency matrix.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-adjacency-matrix-aggregation.html',
      }),

    // TODO: need a runtime type checking to check the shape
    new ESStructureClause('bucket_children',
      {
        type: 'field',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'A special single bucket aggregation that enables aggregating from buckets on parent document types to buckets on child documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-children-aggregation.html',
      }),

    new ESStructureClause('bucket_diversified_sampler',
      {
        field: 'field', // any field
        missing: 'number',
        value_type: 'string',
        script: 'script',
        shard_size: 'number',
        max_docs_per_value: 'number',
        execution_hint: 'string',
      },
      {
        path: ['aggregation', 'bucket'],
        desc: 'Adds the ability to limit the number of matches that share a common value such as an "author".',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-aggregations-bucket-diversified-sampler-aggregation.html',
      }),

    new ESVariantClause('sort_object',
      {
        'object:_script': 'script_sort',
        'object:_score': 'score_sort',
        'object': 'field_sort',
      },
      {
        path: ['sort'],
        desc: 'Sort object value can be a field sort, a script sort, a score sort, or a geo distance sort.',
      }),
    new ESMapClause('field_sort',
      'field',
      'field_sort_value',
      {
        path: ['sort'],
        desc: 'Sort by a single field, either ascending or descending.',
      },
    ),
    new ESVariantClause('field_sort_value',
      {
        string: 'field',
        object: 'field_sort_object',
      },
      {
        path: ['sort'],
      }),
    new ESStructureClause('field_sort_object',
      {
        missing: 'sort_missing',
        unmapped_type: 'string',
        order: 'sort_order',
        nested_path: 'sort_nested_path',
        nested_filter: 'sort_nested_filter',
        mode: 'sort_mode',
      },
      {
        path: ['sort'],
        desc: 'Script Sorting',
        suggestions: ['order', 'missing', 'unmapped_type'],
      }),
    new ESStructureClause('score_sort',
      {
        _score: 'score_sort_object',
      },
      {
        path: ['sort'],
        desc: 'Sort using Elastic\'s built-in scoring functionality.',
      }),
    new ESStructureClause('score_sort_object',
      {
        order: 'sort_order',
        nested_path: 'sort_nested_path',
        nested_filter: 'sort_nested_filter',
      },
      {
        path: ['sort'],
        desc: 'Score Sorting',
        url: '',
      }),
    new ESStructureClause('script_sort',
      {
        _script: 'script_sort_object',
      },
      {
        path: ['sort'],
        desc: 'Sort results using a script',
        required: ['_script'],
      }),
    new ESStructureClause('script_sort_object',
      {
        order: 'sort_order',
        nested_path: 'sort_nested_path',
        nested_filter: 'sort_nested_filter',
        type: 'sort_field_type',
        script: 'script',
        mode: 'sort_mode',
      },
      {
        path: ['sort'],
        desc: 'The contents of a scripted sort',
        url: '',
        required: ['type', 'script'],
      }),
    new ESVariantClause('sort_clause',
      {
        object: 'sort_object',
        array: 'sort_clause[]',
        string: 'field',
      },
      {
        path: ['sort'],
        desc: 'Controls the order in which results are returned. Results will be sorted by the first condition, and ties are broken by the second, and so on.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html',
      }),
    new ESStructureClause('sort_settings',
      {
        'order': 'sort_order',
        'mode': 'sort_mode',
        'missing': 'sort_missing',
        'nested_path': 'sort_nested_path',
        'nested_filter': 'sort_nested_filter',
        'unmapped_type': 'sort_unmapped_type',
        'unit': 'distance_unit',
        'distance_type': 'distance_type',
        'pin.location': 'geo_points',
        'type': 'sort_field_type',
        'script': 'script',
      },
      {
        path: ['sort'],
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html',
        suggestions: ['order', 'missing', 'unmapped_type', 'script'],
      }),
    new ESEnumClause('sort_mode',
      ['min', 'max', 'sum', 'avg', 'median'],
      {
        path: ['sort'],
        desc: 'When sorting by an array or multi-valued field, controls how that field is used to sort results.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_sort_mode_option',
        template: 'avg',
      }),
    new ESEnumClause('sort_order',
      ['asc', 'desc'],
      {
        path: ['sort'],
        desc: 'The order to sort this field by: ascending or descending.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_sort_order',
        template: 'asc',
      }),
    new ESReferenceClause('sort_nested_path',
      'field',
      {
        path: ['sort'],
        name: 'nested path',
        desc: 'The name of the nested object to sort by.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#nested-sorting',
      }),
    new ESReferenceClause('sort_nested_filter',
      'query',
      {
        path: ['sort'],
        name: 'nested sort filter',
        desc: 'A query that filters the nested objects before using them to sort by.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#nested-sorting',
      }),
    new ESBaseClause('sort_missing',
      {
        path: ['sort'],
        name: 'missing value clause',
        desc: 'Sets how documents missing this sort field will be treated. The special values of _last and _first can be used to sort these documents after or before other results, or substitute value can be specified.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_missing_values',
        template: '_last',
      }),
    new ESReferenceClause('sort_unmapped_type',
      'field_type',
      {
        path: ['sort'],
        name: 'unmapped type',
        desc: 'If no mapping is defined for this field, unmapped_type can be used to set what type the field is interpreted as.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_ignoring_unmapped_fields',
      }),
    new ESReferenceClause('sort_field_type',
      'field_type',
      {
        path: ['sort'],
        desc: 'The type to interpret the result of the sort script as.',
      }),
    new ESBooleanClause('track_scores',
      {
        path: ['score'],
        desc: 'When set to true, the Elastic _score field will be computed even when it isn\'t used to sort the results.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_multiple_reference_points',
        template: true,
      }),
    new ESStringClause('query_name',
      {
        path: ['primary'],
        desc: 'names this query or filter. The results will be tagged with the given name.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-named-queries-and-filters.html',
      }),
    new ESMapClause('script_fields',
      'string',
      'script_field',
      {
        path: ['select'],
        desc: 'Maps field names to the scripts that compute the script field values.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-script-fields.html',
      }),
    new ESReferenceClause('post_filter',
      'query',
      {
        path: ['filter'],
        desc: 'Applies a filter after computing aggregations.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-post-filter.html',
      }),
    new ESStructureClause('highlight',
      {
        fields: 'highlight_fields',
        type: 'highlight_type',
        force_source: 'highlight_force_source',
        fragment_size: 'highlight_fragment_size',
        number_of_fragments: 'highlight_number_of_fragments',
        no_match_size: 'highlight_no_match_size',
        fragmenter: 'highlight_fragmenter',
        highlight_query: 'highlight_query',
        pre_tags: 'string[]',
        post_tags: 'string[]',
        encoder: 'highlight_encoder',
        require_field_match: 'highlight_require_field_match',
        boundary_scanner: 'highlight_boundary_scanner',
        boundary_chars: 'highlight_boundary_chars',
        boundary_max_scan: 'highlight_boundary_max_scan',
        boundary_scanner_locale: 'string',
        matched_fields: 'highlight_matched_fields',
        phrase_limit: 'highlight_phrase_limit',
      },
      {
        path: ['format'],
        desc: 'Applies highlights to matching tokens in the specified hit fields.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html',
        required: ['fields'],
      }),
    new ESMapClause('highlight_fields',
      'field',
      'highlight_options',
      {
        path: ['format', 'highlighting'],
        desc: 'Defines highlighting settings for specific fields.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html',
      }),
    new ESStructureClause('highlight_options',
      {
        type: 'highlight_type',
        force_source: 'highlight_force_source',
        fragment_size: 'highlight_fragment_size',
        number_of_fragments: 'highlight_number_of_fragments',
        no_match_size: 'highlight_no_match_size',
        fragmenter: 'highlight_fragmenter',
        highlight_query: 'highlight_query',
        pre_tags: 'string[]',
        post_tags: 'string[]',
        encoder: 'highlight_encoder',
        require_field_match: 'highlight_require_field_match',
        boundary_scanner: 'highlight_boundary_scanner',
        boundary_chars: 'highlight_boundary_chars',
        boundary_max_scan: 'highlight_boundary_max_scan',
        boundary_scanner_locale: 'string',
        matched_fields: 'highlight_matched_fields',
        phrase_limit: 'highlight_phrase_limit',
      },
      {
        path: ['format', 'highlighting'],
        desc: 'Sets highlighting options for this field.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#_force_highlighter_type',
      }),
    new ESEnumClause('highlight_type',
      [
        'plain',
        'postings',
        'fvh',
      ],
      {
        path: ['format', 'highlighting'],
        desc: 'Chooses the highlighter type to use.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#_force_highlighter_type',
        template: 'plain',
      }),
    new ESBooleanClause('highlight_force_source',
      {
        path: ['format', 'highlighting'],
        desc: 'When enabled, forces highlights to use the source data instead of field data.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#_force_highlighting_on_source',
      }),
    new ESEnumClause('highlight_encoder',
      [
        'default',
        'html',
      ],
      {
        path: ['format', 'highlighting'],
        desc: 'Chooses how the highlighter encodes its result.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#_encoder',
        template: 'default',
      }),
    new ESNumberClause('highlight_fragment_size',
      {
        path: ['format', 'highlighting'],
        desc: 'The size of the highlighted fragments. The default size is 100.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#_fragmenter',
        template: 100,
      }),
    new ESNumberClause('highlight_number_of_fragments',
      {
        path: ['format', 'highlighting'],
        desc: 'The max number of the highlighted fragments. The default value is 5.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#_fragmenter',
        template: 5,
      }),
    new ESNumberClause('highlight_no_match_size',
      {
        path: ['format', 'highlighting'],
        desc: 'If set larger than zero a fragment of text of this size will be returned even when there is no highlighted match in the field.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#_fragmenter',
        template: 0,
      }),
    new ESEnumClause('highlight_fragmenter',
      [
        'simple',
        'span',
      ],
      {
        path: ['format', 'highlighting'],
        desc: 'Sets how snippet text is broken up into fragments.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#_fragmenter',
        template: 'simple',
      }),
    new ESReferenceClause('highlight_query',
      'query',
      {
        path: ['format', 'highlighting'],
        desc: 'Sets a different query to use for highlighting.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#_highlight_query',
      }),
    new ESBooleanClause('highlight_require_field_match',
      {
        path: ['format', 'highlighting'],
        desc: 'If set to false, fields will be highlighted even if the query did not match on them.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#field-match',
        template: true,
      }),
    new ESEnumClause('highlight_boundary_scanner',
      [
        'chars',
        'sentence',
        'word',
      ],
      {
        path: ['format', 'highlighting'],
        desc: 'Sets how the fast vector highlighter breaks fragments up.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#boundary-scanners',
        template: 'chars',
      }),
    new ESStringClause('highlight_boundary_chars',
      {
        path: ['format', 'highlighting'],
        desc: 'Sets boundary chars to used when using the chars boundary scanner.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#boundary-scanners',
      }),
    new ESStringClause('highlight_boundary_max_scan',
      {
        path: ['format', 'highlighting'],
        desc: 'Sets the max scan distance when looking for boundary chars in the chars boundary scanner mode.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#boundary-scanners',
      }),
    new ESReferenceClause('highlight_matched_fields',
      'field[]',
      {
        desc: 'When using the fast vector highlighter, this setting combines multiple fields when highlighting.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#matched-fields',
      }),
    new ESNumberClause('highlight_phrase_limit',
      {
        desc: 'When using the fast vector highlighter, this sets the maximum number of phrases that are analyzed. Higher settings are slower but more extensive highlighting is done.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-highlighting.html#phrase-limit',
        template: 256,
      }),
    new ESStructureClause('rescore',
      {
        window_size: 'rescore_window_size',
        query: 'query',
        query_weight: 'query_weight',
        rescore_query_weight: 'rescore_query_weight',
        score_mode: 'rescore_mode',
      },
      {
        name: 'query rescorer',
        path: ['sort', 'rescore'],
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-rescore.html',
        desc: 'Applies a second query to the top results, further sorting them. Rescoring is normally used to apply a slower sorting rule to the top results of a faster query.',
        required: ['query'],
        suggestions: ['query', 'window_size', 'query_weight', 'rescore_query_weight'],
      }),
    new ESNumberClause('rescore_window_size',
      {
        path: ['sort', 'rescore'],
        desc: 'The number of top results to rescore. If not specified, defaults to from + size.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-rescore.html#_query_rescorer',
        template: 200,
      }),
    new ESNumberClause('query_weight',
      {
        path: ['sort', 'rescore'],
        desc: 'The weight applied to the base query when computing elastic\'s internal score.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-rescore.html#_query_rescorer',
        template: 1,
      }),
    new ESNumberClause('rescore_query_weight',
      {
        path: ['sort', 'rescore'],
        desc: 'The weight applied to the rescore query when computing elastic\'s internal score.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-rescore.html#_query_rescorer',
        template: 1,
      }),
    new ESEnumClause('rescore_mode',
      [
        'total',
        'multiply',
        'avg',
        'max',
        'min',
      ],
      {
        path: ['sort', 'rescore'],
        desc: 'Controls how original and rescore scores are combined.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-rescore.html#_query_rescorer',
      }),
    new ESStructureClause('script_field',
      {
        script: 'script',
      },
      {
        path: ['select'],
        desc: 'Contains the script used to compute a script field\'s value for each hit.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-script-fields.html',
        required: ['script'],
      }),
    new ESVariantClause('geo_points',
      {
        object: 'geo_point',
        array: 'geo_point[]',
      },
      {
        path: ['geo'],
        desc: 'Either a single geo point, or a list of several.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_multiple_reference_points',
      }),
    new ESVariantClause('geo_point',
      { object: 'latlon_object', array: 'number[]', string: 'string' },
      {
        path: ['geo'],
        desc: 'Indicates a point location. Should be one of these: a lat-lon object, {"lat":40, "lon":-70}; a lat lon string, "40,-70"; a geohash, "drm3btev3e86"; or a lat lon array, [40, -70].',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_lat_lon_as_properties',
      }),
    new ESStructureClause('latlon_object', { lat: 'number', lon: 'number' }, {}),
    new ESEnumClause('distance_type',
      ['arc', 'plane'],
      {
        path: ['geo'],
        desc: 'Chooses the distance formula to use. arc is the default, plane is faster but less accurate.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#geo-sorting',
        template: 'arc',
      }),
    new ESScriptClause('script',
      {
        lang: 'script_language',
        params: 'script_params',
        inline: 'script_inline',
        stored: 'script_name',
      },
      {
        path: ['script'],
        desc: 'Calls a script function and returns the result. Can be used to call a stored or inline script.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html',
        suggestions: ['lang', 'params', 'stored', 'inline'],
      }),
    new ESStringClause('script_inline',
      {
        path: ['script'],
        desc: 'The code for this inline script',
      }),
    new ESMapClause('script_params', 'string', 'any',
      {
        path: ['script'],
        desc: 'Parameters to pass to the script.',
      }),
    new ESEnumClause('script_language',
      ['painless', 'groovy', 'expression', 'mustache', 'javascript', 'python'],
      {
        path: ['script'],
        desc: 'The scripting language to use.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html#_general_purpose_languages',
        template: 'painless',
      }),
    new ESStringClause('script_name',
      {
        path: ['script'],
        desc: 'The name of the stored script to call.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html#modules-scripting-stored-scripts',
      }),
    // FetchSourceContext.java
    new ESVariantClause('_source',
      {
        object: 'includeExclude',
        boolean: 'boolean',
        string: 'field',
        array: 'field[]',
      },
      {
        path: ['primary'],
        name: 'source clause',
        desc: 'Controls which source fields are returned by this query',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-source-filtering.html',
      }),
    new ESStructureClause('includeExclude',
      {
        includes: 'field[]',
        excludes: 'field[]',
      },
      {
        path: ['filter'],
        name: 'include and exclude lists',
        desc: 'Filters in include values and out exclude values.',
      }),
    new ESStructureClause('query',
      {
        bool: 'bool_query',
        term: 'term_query',
        terms: 'terms_query',
        range: 'range_query',
        exists: 'exists_query',
        prefix: 'prefix_query',
        wildcard: 'wildcard_query',
        regexp: 'regexp_query',
        fuzzy: 'fuzzy_query',
        match_all: 'match_all',
        match_none: 'match_none',
        match: 'match',
        type: 'type',
        ids: 'string[]',
        match_phrase: 'match_phrase',
        match_phrase_prefix: 'match_phrase_prefix',
        multi_match: 'multi_match',
        common: 'common_terms_query',
        query_string: 'query_string_clause',
        simple_query_string: 'simple_query_string',
        constant_score: 'constant_score',
        dis_max: 'dis_max',
        function_score: 'function_score',
        script_score: 'script_score',
        boosting: 'boosting_query',
        nested: 'nested_query',
        has_child: 'has_child_query',
        has_parent: 'has_parent_query',
        _name: 'query_name',
      },
      {
        path: ['primary'],
        name: 'query',
        desc: 'Controls match, term, and range filtering and matching.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-query.html',
        // template: { bool: null },
        suggestions: ['term', 'terms', 'range', 'match', 'bool', 'query_string'],
      }),
    new ESArrayClause('ids',
      'string',
      {
        path: ['filter'],
        name: 'ids clause',
        desc: 'Selects a set of document ids to search within.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-query.html',
      }),
    new ESReferenceClause('constant_score',
      'query',
      {
        path: ['score'],
        name: 'constant score query',
        desc: 'A query clause that is not used to compute result scores.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-constant-score-query.html',
      }),
    new ESStructureClause('bool_query',
      {
        must: 'must',
        must_not: 'must_not',
        filter: 'filter',
        should: 'should',
        minimum_should_match: 'minimum_should_match',
        boost: 'boost',
      },
      {
        path: ['filter'],
        name: 'bool',
        desc: 'Filters in and out documents meeting the given logical conditions.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html',
        // template: { must: null, must_not: null, should: null, minimum_should_match: null },
        suggestions: ['must', 'must_not', 'filter', 'should', 'minimum_should_match'],
      }),
    new ESVariantClause('must',
      {
        object: 'query',
        array: 'query[]',
      },
      {
        path: ['filter'],
        name: 'must clause',
        desc: 'All results must match this subquery. The better a result matches, the higher its __score will be. The must clause may be a single query object, or an array of query objects.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html',
      }),
    new ESVariantClause('must_not',
      {
        object: 'query',
        array: 'query[]',
      },
      {
        path: ['filter'],
        name: 'must not clause',
        desc: 'All results must not match this query. Filters out documents that match this subquery. The must not clause may be a single query object, or an array of query objects.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html',
      }),
    new ESVariantClause('filter',
      {
        object: 'query',
        array: 'query[]',
      },
      {
        path: ['filter'],
        name: 'filter context clause',
        desc: 'Query conditions in a filter clause aren\'t used when computing a document\'s elastic __score.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html#_scoring_with_literal_bool_filter_literal',
      }),
    new ESVariantClause('should',
      {
        object: 'query',
        array: 'query[]',
      },
      {
        path: ['filter'],
        name: 'should clause',
        desc: 'Results should match this query. The better a result matches, the higher its __score will be. Also see minimum_should_match. The should clause may be a single query object, or an array of query objects.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html',
      }),
    new ESVariantClause('minimum_should_match',
      {
        number: 'number',
        string: 'string',
      },
      {
        path: ['filter'],
        name: 'minimum should match',
        desc: 'Controls how many or what percentage of should clauses are required to match.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html',
      }),
    new ESMapClause('term_query',
      'field',
      'term_value',
      {
        path: ['filter'],
        desc: 'Matches documents that contain an exact match for the given term.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html',
        multifield: false,
      }),
    new ESVariantClause('term_value',
      {
        object: 'term_settings',
        null: 'null',
        boolean: 'boolean',
        number: 'number',
        string: 'string',
      },
      {
        path: ['filter'],
        required: ['value'],
      }),
    new ESStructureClause('term_settings',
      {
        value: 'base',
        boost: 'boost',
      },
      {
        path: ['filter'],
        required: ['value'],
      }),
    new ESMapClause('terms_query',
      'field',
      'terms_value',
      {
        path: ['filter'],
        desc: 'Matches documents that contain an exact match for any of the given terms. Can also be populated by a terms lookup clause.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html',
      }),
    new ESVariantClause('terms_value',
      {
        object: 'terms_lookup',
        array: 'any[]',
      },
      {
        path: ['filter'],
      }),
    new ESStructureClause('terms_lookup',
      {
        index: 'index',
        type: 'type',
        id: 'terms_lookup_id',
        path: 'terms_lookup_path',
        routing: 'string',
      },
      {
        path: ['filter'],
      }),
    new ESStringClause('terms_lookup_id',
      {
        name: 'id',
        path: ['filter'],
        desc: 'The id of the document to query inside a terms lookup clause.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html',
      }),
    new ESStringClause('terms_lookup_path',
      {
        name: 'path',
        path: ['filter'],
        desc: 'The field to get the term values from in the lookup document.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html',
      }),
    new ESMapClause('range_query',
      'field',
      'range_value',
      {
        path: ['filter'],
        desc: 'Matches documents that have a value within the specified range.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html',
        multifield: false,
      }),
    new ESStructureClause('range_value',
      {
        gt: 'base',
        gte: 'base',
        lt: 'base',
        lte: 'base',
        boost: 'boost',
      },
      {
        path: ['filter'],
      }),
    new ESStructureClause('exists_query',
      {
        field: 'field',
        null_value: 'base',
      },
      {
        path: ['filter'],
        desc: 'Matches documents that have one or more non-null values in the specified field.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html',
        required: ['field'],
      }),
    new ESMapClause('prefix_query',
      'field',
      'prefix_query_value',
      {
        path: ['filter'],
        desc: 'Matches documents that contain terms with the given prefix.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html',
        multifield: false,
      }),
    new ESVariantClause('prefix_query_value',
      {
        object: 'prefix_query_settings',
        null: 'base',
        boolean: 'base',
        number: 'base',
        string: 'base',
      },
      {
        path: ['filter'],
      }),
    new ESStructureClause('prefix_query_settings',
      {
        value: 'base',
        boost: 'boost',
      },
      {
        path: ['filter'],
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html',
        required: ['value'],
      }),
    new ESMapClause('wildcard_query',
      'field',
      'wildcard_query_value',
      {
        path: ['filter'],
        desc: 'Matches documents using a wildcard expression.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html',
        multifield: false,
      }),
    new ESVariantClause('wildcard_query_value',
      {
        object: 'wildcard_query_settings',
        null: 'base',
        boolean: 'base',
        number: 'base',
        string: 'base',
      },
      {
        path: ['filter'],
      }),
    new ESStructureClause('wildcard_query_settings',
      {
        value: 'base',
        boost: 'boost',
      },
      {
        path: ['filter'],
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html',
        required: ['value'],
      }),
    new ESMapClause('regexp_query',
      'field',
      'regexp_query_value',
      {
        path: ['filter'],
        desc: 'Matches documents using a regular expression.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html',
        multifield: false,
      }),
    new ESVariantClause('regexp_query_value',
      {
        object: 'regexp_query_settings',
        null: 'base',
        boolean: 'base',
        number: 'base',
        string: 'base',
      },
      {
        path: ['filter'],
      }),
    new ESStructureClause('regexp_query_settings',
      {
        value: 'base',
        boost: 'boost',
        flags: 'string',
      },
      {
        path: ['filter'],
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html',
        required: ['value'],
      }),
    new ESMapClause('fuzzy_query',
      'field',
      'fuzzy_query_value',
      {
        desc: 'Can help to make inexact matches in the case of misspellings or multiple spellings of words. The maximum Levenshtein edit distance to expand words (terms) to. The higher this is, the slower and broader queries will be. When applied to a numeric value, the fuzziness is the additional +/- margin that a match can have from the queried value.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html',
        multifield: false,
      }),
    new ESVariantClause('fuzzy_query_value',
      {
        object: 'fuzzy_query_settings',
        null: 'base',
        boolean: 'base',
        number: 'base',
        string: 'base',
      },
      {
        path: ['filter'],
      }),
    new ESStructureClause('fuzzy_query_settings',
      {
        value: 'base',
        boost: 'boost',
        fuzziness: 'fuzziness',
        prefix_length: 'fuzzy_prefix_length',
        max_expansions: 'fuzzy_max_expansions',
      },
      {
        path: ['filter'],
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html',
        suggestions: ['value', 'boost'],
        required: ['value'],
      }),
    new ESNumberClause('boost',
      {
        path: ['score'],
        desc: 'Boosts the score of matches by the given amount. Boosts are not exactly multiplicative.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/guide/current/_boosting_query_clauses.html',
      }),
    new ESStructureClause('match_all',
      {
        boost: 'boost',
      },
      {
        path: ['filter'],
        name: 'match all clause',
        desc: 'Matches all documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html',
      }),
    new ESMapClause('match_none',
      'field',
      'match_value',
      {
        name: 'match none clause',
        path: ['filter'],
        desc: 'Matches no documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html#query-dsl-match-none-query',
      }),
    new ESMapClause('match',
      'field',
      'match_value',
      {
        name: 'match clause',
        path: ['match'],
        desc: 'Does an analyzed (full-text) match on the given term.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html',
        multifield: false,
      }),
    new ESVariantClause('match_value',
      {
        object: 'match_settings',
        null: 'null',
        boolean: 'boolean',
        number: 'number',
        string: 'string',
      },
      {
        path: ['match'],
      }),
    new ESStructureClause('match_settings',
      {
        query: 'string',
        operator: 'match_operator',
        zero_terms_query: 'zero_terms_query',
        cutoff_frequency: 'cutoff_frequency',
        fuzziness: 'fuzziness',
        fuzzy_transpositions: 'fuzzy_transpositions',
        fuzzy_rewrite: 'rewrite',
        analyzer: 'analyzer',
        prefix_length: 'fuzzy_prefix_length',
        max_expansions: 'fuzzy_max_expansions',
        slop: 'slop',
        lenient: 'boolean',
      },
      {
        path: ['match'],
        desc: 'Settings for a match clause.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html',
        template: {
          'query:string': '',
          'operator:match_operator': null,
        },
        required: ['query'],
        suggestions: ['query', 'operator', 'analyzer', 'max_expansions', 'slop', 'lenient'],
      }),
    new ESEnumClause('match_operator',
      ['and', 'or'],
      {
        path: ['match'],
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html#query-dsl-match-query-zero',
        template: 'or',
      }),
    new ESEnumClause('zero_terms_query',
      ['none', 'all'],
      {
        path: ['match'],
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html#query-dsl-match-query-zero',
      }),
    new ESNumberClause('cutoff_frequency',
      {
        path: ['match'],
        desc: 'How common a word (term) needs to be before it is moved into a subquery that is only used if the uncommon words match.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html#query-dsl-match-query-cutoff',
        template: '0.1',
      }),
    new ESBaseClause('fuzziness',
      {
        path: ['match'],
        desc: 'Can help to make inexact matches in the case of misspellings or multiple spellings of words. The maximum Levenshtein edit distance to expand words (terms) to. The higher this is, the slower and broader queries will be. When applied to a numeric value, the fuzziness is the additional +/- margin that a match can have from the queried value.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html#fuzziness',
        template: 'AUTO',
        suggestions: ['AUTO', 0, 1, 2],
      }),
    new ESBooleanClause('fuzzy_transpositions',
      {
        path: ['match'],
        desc: 'Sets if transpositions are allowed when computing fuzzy matches.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html#query-dsl-match-query-fuzziness',
        template: true,
      }),
    new ESEnumClause('slop',
      [0, 1, 2],
      {
        path: ['match'],
        desc: 'How many word (term) transpositions are tolerated when matching a phrase.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html',
        template: 0,
      }),
    new ESStringClause('analyzer',
      {
        path: ['match'],
        desc: 'Chooses which analyzer to use to convert strings into lists of words (tokens) when searching.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-analyzers.html',
        template: 'standard',
        suggestions: [
          'standard',
          'english',
          'simple',
          'whitespace',
          'stop',
          'keyword',
          'pattern',
          'fingerprint',
          'arabic',
          'armenian',
          'basque',
          'brazilian',
          'bulgarian',
          'catalan',
          'cjk',
          'czech',
          'danish',
          'dutch',
          'english',
          'finnish',
          'french',
          'galician',
          'german',
          'greek',
          'hindi',
          'hungarian',
          'indonesian',
          'irish',
          'italian',
          'latvian',
          'lithuanian',
          'norwegian',
          'persian',
          'portuguese',
          'romanian',
          'russian',
          'sorani',
          'spanish',
          'swedish',
          'turkish',
          'thai',
        ],
      }),
    new ESNumberClause('fuzzy_prefix_length',
      {
        path: ['match'],
        desc: 'When using fuzzy matching, this and max_expansions configures fuzzy matching.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html#query-dsl-match-query-fuzziness',
        template: '1',
      }),
    new ESNumberClause('fuzzy_max_expansions',
      {
        path: ['match'],
        name: 'maximum prefix expansions',
        desc: 'Number of suffixes that fuzzy terms are expanded into when matching words. The more expansions, the broader and slower the query will be.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html#query-dsl-match-query-fuzziness',
        template: 50,
      }),
    new ESEnumClause('rewrite',
      [
        'constant_score',
        'scoring_boolean',
        'constant_score',
        'top_terms_1',
        'top_terms_2',
        'top_terms_3',
        'top_terms_4',
        'top_terms_boost_1',
        'top_terms_boost_2',
        'top_terms_boost_3',
        'top_terms_boost_4',
        'top_terms_blended_freqs_1',
        'top_terms_blended_freqs_2',
        'top_terms_blended_freqs_3',
        'top_terms_blended_freqs_4',
      ],
      {
        path: ['match'],
        desc: 'Chooses what method is used to rewrite multi term queries.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-term-rewrite.html#query-dsl-multi-term-rewrite',
        template: 'constant_score',
      }),
    new ESStructureClause('dis_max',
      {
        tie_breaker: 'dis_max_tie_breaker',
        boost: 'boost',
        queries: 'query[]',
      },
      {
        name: 'dis max query',
        path: ['compound'],
        desc: 'Combines results from each of the given queries, ordering results by their maximum score in each query.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-dis-max-query.html',
        required: ['queries'],
      }),
    new ESNumberClause('dis_max_tie_breaker',
      {
        name: 'tie breaker',
        path: ['compound'],
        desc: 'Boosts documents that contain the same term in multiple fields.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-dis-max-query.html',
        template: 0,
      }),
    new ESStructureClause('function_score',
      {
        query: 'query',
        boost: 'boost',
        max_boost: 'boost',
        min_score: 'number',
        script_score: 'script_score',
        weight: 'function_score_weight',
        random_score: 'random_score',
        field_value_factor: 'field_value_factor',
      },
      {
        path: ['score', 'function'],
        desc: 'Customizes the scoring of a subquery using a built-in function score.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#query-dsl-function-score-query',
        required: ['query'],
      }),
    new ESNumberClause('function_score_weight',
      {
        path: ['score', 'function'],
        desc: 'Multiplies scores by the given weight.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-weight',
      }),
    new ESStructureClause('random_score',
      {
        seed: 'number',
      },
      {
        path: ['score', 'function'],
        desc: 'Randomly generates scores based on seed and _uid. Uses the current time as the seed if none is specified.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-random',
      }),
    new ESStructureClause('field_value_factor',
      {
        field: 'field',
        factor: 'field_factor',
        modifier: 'field_value_modifier',
        missing: 'field_value_missing',
      },
      {
        path: ['score', 'function'],
        desc: 'Uses a field value to adjust the score. Can be faster than using a script.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor',
      }),
    new ESStructureClause('decay_function',
      {
        origin: 'decay_origin',
        scale: 'decay_scale',
        offset: 'decay_offset',
        decay: 'decay_decay',
        multi_value_mode: 'decay_multi_value_mode',
      },
      {
        path: ['score', 'function'],
        desc: 'Configures a functional weighting where the score decreases as the field value gets farther away from the origin.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay',
      }),
    new ESReferenceClause('gauss',
      'decay_function',
      {
        path: ['score', 'function'],
        desc: 'Applies a Gaussian decay function.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay',
      }),
    new ESReferenceClause('exp',
      'decay_function',
      {
        path: ['score', 'function'],
        desc: 'Applies an exponential decay function.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay',
      }),
    new ESReferenceClause('linear',
      'decay_function',
      {
        path: ['score', 'function'],
        desc: 'Applies a linear decay function.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay',
      }),
    new ESBaseClause('decay_origin',
      {
        path: ['score', 'function', 'decay'],
        desc: 'The origin of the decay function. Normally this is the best possible value for the field.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay',
        template: '0',
      }),
    new ESBaseClause('decay_offset',
      {
        path: ['score', 'function', 'decay'],
        desc: 'The offset of the decay function. This adjusts the width of the flat region of the function surrounding origin.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay',
        template: '0',
      }),
    new ESBaseClause('decay_scale',
      {
        path: ['score', 'function', 'decay'],
        desc: 'The scale of the decay function. The scale and decay set the slope of the decay function beyond the offset region.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay',
        template: '1',
      }),
    new ESBaseClause('decay_decay',
      {
        path: ['score', 'function', 'decay'],
        desc: 'The decay of the decay function. The scale and decay set the slope of the decay function beyond the offset region.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay',
        template: '0.5',
      }),
    new ESEnumClause('decay_multi_value_mode',
      [
        'min',
        'max',
        'avg',
        'sum',
      ],
      {
        path: ['score', 'function', 'decay'],
        desc: 'Sets the decay behavior when using a multi-valued field.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#_multi_values_fields',
      }),
    new ESNumberClause('field_factor',
      {
        path: ['sort', 'function', 'field value factor'],
        desc: 'Weight placed on this field. Default value of 1.',
        template: 1,
      }),
    new ESEnumClause('field_value_modifier',
      [
        'none',
        'log',
        'log1p',
        'log2p',
        'ln',
        'ln1p',
        'ln2p',
        'square',
        'sqrt',
        'reciprocal',
      ],
      {
        path: ['sort', 'function', 'field value factor'],
        desc: 'Chooses the function to apply to the weighted field value for scoring.',
        template: 'none',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor',
      }),
    new ESNumberClause('field_value_missing',
      {
        path: ['sort', 'function', 'field value factor'],
        name: 'missing field value',
        desc: 'What value to use when the given field is missing.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor',
      }),
    new ESStructureClause('script_score',
      {
        script: 'script',
      },
      {
        path: ['score'],
        desc: 'Customizes the scoring of a subquery using a script.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-script-score',
        required: ['script'],
      }),
    new ESStructureClause('boosting_query',
      {
        positive: 'query',
        negative: 'query',
        negative_boost: 'boost',
      },
      {
        path: ['compound'],
        desc: 'Reduces the score of results that match the given query.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-boosting-query.html',
      }),
    new ESMapClause('match_phrase',
      'field',
      'match_phrase_value',
      {
        path: ['match'],
        name: 'match phrase query',
        desc: 'Makes a phrase query using analyzed text. Matches documents containing the words (tokens) in the phrase text.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html',
        multifield: false,
      }),
    new ESVariantClause('match_phrase_value',
      {
        object: 'match_settings',
        string: 'query_string',
      },
      {
        path: ['match'],
      }),
    new ESMapClause('match_phrase_prefix',
      'field',
      'match_phrase_prefix_value',
      {
        name: 'match phrase prefix query',
        path: ['match'],
        desc: 'Makes a query using analyzed text which matches on all terms and any term starting with the prefix of the last term in the phrase text.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase-prefix.html',
        multifield: false,
      }),
    new ESVariantClause('match_phrase_prefix_value',
      {
        object: 'match_settings',
        string: 'query_string',
      },
      {
        path: ['match'],
      }),
    new ESStructureClause('multi_match',
      {
        query: 'query_string',
        fields: 'multi_match_field',
        type: 'multi_match_type',
        tie_breaker: 'multi_match_tie_breaker',
      },
      {
        name: 'multi match query',
        path: ['match'],
        desc: 'A match query that allows multi-field queries',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html',
        suggestions: ['query', 'type', 'fields'],
        required: ['query', 'fields'],
      }),
    new ESArrayClause('multi_match_field', 'field',
      {
        path: ['match'],
        desc: 'A list of fields to match against.',
      }),
    new ESEnumClause('multi_match_type',
      [
        'best_fields',
        'most_fields',
        'cross_fields',
        'phrase',
        'phrase_prefix',
      ],
      {
        path: ['match'],
        desc: 'Sets how the multi match query finds and scores documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html#multi-match-types',
        template: 'best_fields',
      }),
    new ESNumberClause('multi_match_tie_breaker',
      {
        name: 'tie breaker',
        path: ['match'],
        desc: 'A setting of 0 causes the query to use the best score out of each field\'s match; a setting of 1 causes the query to add all of the scores. Settings in between are a blend of these methods.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html#_literal_tie_breaker_literal',
        template: 0,
      }),
    new ESReferenceClause('common_terms_query',
      'root',
      {
        path: ['match'],
        desc: 'A query which breaks the query words (terms) into common and uncommon sets. Matches on uncommon words are given more weight than matches on common words.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-common-terms-query.html',
      }),
    new ESStructureClause('query_string_clause',
      {
        query: 'query_string',
        default_field: 'query_string_default_field',
        default_operator: 'query_string_default_operator',
        analyzer: 'analyzer',
        allow_leading_wildcard: 'boolean',
        enable_position_increments: 'boolean',
        fuzzy_max_expansions: 'fuzzy_max_expansions',
        fuzziness: 'fuzziness',
        fuzzy_prefix_length: 'fuzzy_prefix_length',
        phrase_slop: 'slop',
        boost: 'boost',
        auto_generate_phrase_queries: 'boolean',
        analyze_wildcard: 'boolean',
        max_determinized_states: 'number',
        minimum_should_match: 'minimum_should_match',
        lenient: 'lenient',
        time_zone: 'string',
        quote_field_suffix: 'string',
        split_on_whitespace: 'boolean',
        all_fields: 'boolean',
        use_dis_max: 'boolean',
        tie_breaker: 'dis_max_tie_breaker',
      },
      {
        path: ['match'],
        desc: 'Uses a query parser to parse its content so that operators like AND and OR can be used inside a query string.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html',
        suggestions: [
          'query',
          'default_operator',
          'default_field',
          'analyzer',
          'phrase_slop',
          'fuzziness',
          'lenient',
          'boost',
        ],
        required: ['query'],
      }),
    new ESReferenceClause('query_string_default_field',
      'field',
      {
        name: 'default field',
        path: ['match'],
        desc: 'Defines which field is queried when no prefix is specified.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html',
        template: '_all',
      }),
    new ESEnumClause('query_string_default_operator',
      ['AND', 'OR'],
      {
        name: 'default operator',
        path: ['match'],
        desc: 'Defines how consecutive terms in the query are combined.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html',
        template: 'OR',
      }),
    new ESStructureClause('nested_query',
      {
        path: 'field',
        score_mode: 'nested_score_mode',
        query: 'query',
        ignore_unmapped: 'ignore_unmapped',
      },
      {
        path: ['join'],
        desc: 'Queries nested documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html',
        template: {
          'path:field': '',
          'score_mode:nested_score_mode': null,
          'query:query': null,
        },
        required: ['path', 'query'],
        suggestions: ['path', 'score_mode', 'query'],
      }),
    new ESEnumClause('nested_score_mode',
      ['avg', 'sum', 'min', 'max', 'none'],
      {
        name: 'score mode',
        path: ['join'],
        desc: 'Controls the way in which nested document matching adjusts the score of the parent document.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html',
        template: 'avg',
      }),
    new ESStructureClause('has_child_query',
      {
        type: 'field',
        score_mode: 'has_child_score_mode',
        min_children: 'number',
        max_children: 'number',
        ignore_unmapped: 'ignore_unmapped',
        query: 'query',
      },
      {
        path: ['join'],
        desc: 'Matches documents that have nested (child) documents that match this query',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-query.html',
        template: {
          'type:field': '',
          'score_mode:has_child_score_mode': null,
          'query:query': null,
        },
        required: ['type', 'query'],
        suggestions: ['type', 'query', 'score_mode'],
      }),
    new ESEnumClause('has_child_score_mode',
      ['avg', 'sum', 'min', 'max', 'none'],
      {
        path: ['join'],
        name: 'score mode',
        desc: 'Controls the way in which nested document matching adjusts the score of the parent document.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-query.html',
        template: 'none',
      }),
    new ESStructureClause('has_parent_query',
      {
        parent_type: 'type',
        score: 'has_parent_score',
        ignore_unmapped: 'ignore_unmapped',
        query: 'query',
      },
      {
        path: ['join'],
        desc: 'Query that returns nested (child) documents that have parents that match the query.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-parent-query.html',
        template: {
          'parent_type:type': '',
          'score:has_parent_score': null,
          'query:query': null,
        },
        required: ['parent_type', 'query'],
      }),
    new ESBooleanClause('has_parent_score',
      {
        path: ['join'],
        desc: 'If set to false, the document score is set to the boost on the has_parent query. If set to true, the score of the parent document is used to score the child documents.',
        template: false,
      }),
    new ESBooleanClause('ignore_unmapped',
      {
        desc: 'If unmapped paths should be ignored.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-query.html#_ignore_unmapped',
        template: false,
      }),
    new ESStructureClause('simple_query_string',
      {
        query: 'query_string',
        fields: 'field[]',
        default_operator: 'query_string_default_operator',
        analyzer: 'analyzer',
        flags: 'string',
        analyze_wildcard: 'boolean',
        minimum_should_match: 'minimum_should_match',
        lenient: 'lenient',
        quote_field_suffix: 'string',
        all_fields: 'boolean',
      },
      {
        name: 'simple query string clause',
        path: ['match'],
        desc: 'A simplified version of a query string clause that works even when the query string is malformed.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html',
        required: ['query'],
        suggestions: ['query', 'fields', 'default_operator', 'analyzer', 'lenient'],
      }),
    new ESStringClause('query_string',
      {
        name: 'query string',
        path: ['match'],
        desc: 'The text to match. This text will be analyzed (broken into words) and elastic will find documents containing those words. Some additional syntax is allowed in query strings; see the documentation for more information.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax',
      }),
    new ESBooleanClause('lenient',
      {
        path: ['match'],
        desc: 'Whether or not query string formatting errors should be ignored.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html',
      }),
    new ESEnumClause('search_type',
      [
        'query_then_fetch',
        'dfs_query_then_fetch',
      ],
      {
        path: ['control'],
        desc: 'Controls how the search is distributed accross the cluster. "query_then_fetch" is the default setting, and is typically the best choice. "dfs_query_then_fetch" produces more accurate text search scores but can be slower.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking_50_search_changes.html',
        template: 'query_then_fetch',
      }),
    new ESBooleanClause('explain',
      {
        path: ['control', 'diagnostic'],
        desc: 'When true, the query will return an explaination of how the score of each result was computed. Normally this option should only used for diagnostic purposes.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-explain.html',
      }),
    new ESBooleanClause('version',
      {
        path: ['control', 'diagnostic'],
        desc: 'When true, returns document version numbers for each hit.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-version.html',
      }),
    new ESMapClause('index_boost',
      'field',
      'boost',
      {
        path: ['score'],
        desc: 'Sets a boost level per index when querying multiple indicies.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-index-boost.html',
      }),
    new ESNumberClause('min_score',
      {
        path: ['filter'],
        desc: 'The minimum elastic _score for returned documents.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-min-score.html',
      }),
    new ESVariantClause('multiple_inner_hits',
      {
        object: 'inner_hits',
        array: 'inner_hits[]',
      },
      {
        path: ['join'],
        desc: 'One or more inner hits clauses.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-inner-hits.html',
      }),
    new ESStructureClause('inner_hits',
      {
        from: 'from',
        size: 'size',
        sort: 'sort_clause',
        name: 'query_name',
        highlight: 'highlight',
        explain: 'explain',
        version: 'version',
        _source: '_source',
        script_fields: 'script_fields',
        docvalue_fields: 'field[]',
      },
      {
        path: ['join'],
        desc: 'When performing a parent-child or nested query, this clause will return matching documents in the inner scope: for parent-child queries, child documents are returned as inner_hits; for nested queries, parent documents are returned.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-inner-hits.html',
        suggestions: ['name', 'from', 'size', 'sort'],
        template: {},
      }),
    new ESStructureClause('collapse',
      {
        field: 'field',
        inner_hits: 'multiple_inner_hits',
        max_concurrent_group_searches: 'number',
      },
      {
        path: ['compound'],
        desc: 'Groups (collapses) results by the given field. Returns the highest ranking result for each distinct value of the field as the representative hit for that value.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-collapse.html',
        required: ['field'],
      }),
    new ESReferenceClause('search_after',
      'base[]',
      {
        path: ['control'],
        desc: 'A more efficient pagination method than using "from". Use the sort values of the previous page\'s query here to set the beginning point of this page of results.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-search-after.html',
      }),
    new ESMapClause('suggest',
      'string',
      'suggest_settings',
      {
        // TODO: add support for global suggest text: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html#global-suggest
        path: ['suggest'],
        desc: 'Provides spelling and related terms suggestions using an elastic suggester. Each property name labels the suggestions returned.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html',
      }),
    new ESStructureClause('suggest_settings',
      {
        text: 'suggest_text',
        field: 'suggest_field',
        term: 'term_suggestor',
        phrase: 'object', // TODO: add these suggestors to the spec
        completion: 'object',
        context: 'object',
      },
      {
        path: ['suggest'],
        desc: 'Sets term suggestion settings using a suggestor. The suggestor used is based on which suggestor clause is added: term, phrase, completion, or context.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html',
        suggestions: ['text', 'field', 'term'],
      }),
    new ESStringClause('suggest_text',
      {
        path: ['suggest'],
        desc: 'The text to use when generating suggestions.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html#_common_suggest_options',
      }),
    new ESFieldClause('suggest_field',
      {
        path: ['suggest'],
        desc: 'The field to use to get suggestions from.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html#_common_suggest_options',
      }),
    new ESReferenceClause('suggest_analyzer',
      'analyzer',
      {
        path: ['suggest'],
        desc: 'The analyzer to use when generating suggestions.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html#_common_suggest_options',
      }),
    new ESNumberClause('suggest_number',
      {
        path: ['suggest'],
        desc: 'The maximum number of suggestions to be returned by this suggestor.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html#_common_suggest_options',
        template: 10,
      }),
    new ESEnumClause('suggest_sort',
      [
        'score',
        'frequency',
      ],
      {
        path: ['suggest'],
        desc: 'The sorting mode for sorting generated suggestions.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html#_common_suggest_options',
        template: 'score',
      }),
    new ESEnumClause('suggest_mode',
      [
        'missing',
        'popular',
        'always',
      ],
      {
        path: ['suggest'],
        desc: 'The suggestion mode for sorting generated suggestions. "missing" returns terms not in the index, "popular" returns terms that are more common than the input terms, and "always" returns all suggestions.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html#_common_suggest_options',
        template: 'missing',
      }),
    new ESStructureClause('term_suggestor',
      {
        field: 'suggest_field',
        analyzer: 'suggest_analyzer',
        size: 'suggest_number',
        sort: 'suggest_sort',
        suggest_mode: 'suggest_mode',
        // TODO: add the other settings: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html
      },
      {
        path: ['suggest'],
        desc: 'Sets term suggestion settings using a suggestor.',
        url: 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html',
      }),
  ];

export default EQLSpec;
