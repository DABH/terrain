// json path guesser boilerplate

function matchingFields(object) // check that all the objects in the json have the same number of keys; maybe can update to have enough keys in common (i.e. they all have 'name', etc)
{
  startLength = undefined;
  check = undefined;
  for (item in object)
  {
    // check that each one has the same number of attributes? 
    let itemLength = item !== undefined && item.length();
    check = (startLength === undefined) ? true : itemLength === startLength; // if startLength === und then it's the first item, otherwise check that current item has same # of attributes
    if (check === false) 
    {
      return false; // some item has a diff number of attributes
    }
    startLength = itemLength; // update the continually compared startLength
  }
  return check; 
}

function isDesiredPath(jsonFile,key)
{
	const object = jsonFile[key];
  if (object === undefined || null)
  {
    return false;
  }
  if (typeOf(object) === string || typeOf(object) === number)
  {
    return false;
  }
  if (object.length() === 0 || 1)
  {
    return false; // if object or array (?) chances are cant be this small or empty?
  }
  // check that each thing inside has the same fields(?) 
  return matchingFields(object); (or return true automatically if this returns true because it's a pretty strict check, otherwise check other things) 

  // and other fancier checks TDB 
}

function findDesiredPath(jsonFile)
{
  if (isAtEnd)
  {
    return jsonFile; // the jsonFile itself should already be the right path because there's nothing else to nest into?
  }
  else
  {
    const possiblePaths = [];
    for (key in jsonFile)
    {
      if (isDesiredPath(jsonFile, key))
      {
        possiblePaths.push(key);
      }
      findDesiredPath(jsonFile, key);
    }
    return possiblePaths;
  }
}