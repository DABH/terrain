[
  {
    "Select":
    { 
      "Snippet": "Get data", 
      "Summary": "The Select statement returns a result set of records from one or more tables.",
      "Type": "prefix operator",
      "Syntax": "select field name(s)",
      "Text": 
      [ 
        "The SQL SELECT statement returns a result set of records from one or more tables.",
        [
          {
            "id": "c-2735991550",
            "parentId": "CI2XI",
            "properties": [{
              "id": "0.9",
              "property": "user.name"
            }],
            "type": "select"
          },
          "from 'users' as user\nselect user.name"
        ],
        "A SELECT statement retrieves zero or more rows from one or more database tables or database views. In most applications, SELECT is the most commonly used data manipulation language (DML) command. As SQL is a declarative programming language, SELECT queries specify a result set, but do not specify how to calculate it. The database translates the query into a query plan which may vary between executions, database versions and database software. This functionality is called the query optimizer as it is responsible for finding the best possible execution plan for the query, within applicable constraints."
      ]
    },
    "Take":
    { 
      "Snippet": "Returns n results", 
      "Summary": "Returns a query expression representing the first n results from the expression on the left hand side.  The number of results n is the evaluation of the right hand side.", 
      "Type": "binary infix operator",
      "Syntax": "query expression TAKE expression",
      "Text": 
      [ 
        [
          {
            "id": "c-4",
            "parentId": "c-2",
            "type": "take",
            "value": "10"
          },
          "take 10"
        ],
        "Take is a binary infix operator, meaning it sits between two expressions. Take returns a query expression that is the first n results of the query expression on its left hand side.  The number of results n to be returned is determined from the right hand side. In order to get a specific set of results, the data can be sorted based on some parameter first and then the top n results selected via Take. For example, if you wanted the 10 oldest people in a group, you would sort the people based on descending age and then use 'Take 10'.",
        "This exampe takes the first 10 results (the names of users) from the table 'users.'",
        [
        {
          "cards": [
            {
              "id": "c-3",
              "parentId": "c-2",
              "properties": [
                {
                  "id": "0.6",
                  "property": "user.name"
                }
              ],
              "type": "select"
            },
            {
              "id": "c-4",
              "parentId": "c-2",
              "type": "take",
              "value": "10"
            }
          ],
          "group": "users",
          "id": "c-2",
          "iterator": "user",
          "joins": [],
          "parentId": "8R",
          "type": "from"
        },
          "from 'users' as user\nselect user.name\ntake 10"
        ]
      ]
    },
    "From":
    { 
      "Snippet": "Table being queried", 
      "Summary": "Returns a query expression representing all elements in the given source.", 
      "Syntax": "FROM source AS definition",
      "Text": 
      [ 
        "The SQL From clause is the source of a rowset to be operated upon in a Data Manipulation Language (DML) statement. From clauses are very common, and will provide the rowset to be exposed through a Select statement, the source of values in an Update statement, and the target rows to be deleted in a Delete statement.",
        [
          {
            "cards": [],
            "id": "c-2735991550",
            "parentId": "CI2XI",
            "group": "users",
            "iterator": "user",
            "joins": [],
            "type": "from"
          },
          "from 'users' as user\nfilter user.id == 0"
        ]
      ]
    },
    "Skip":
    { 
      "Snippet": "Removes first n elements", 
      "Summary": "Returns a query expression representing the left-hand query expression, with the first n elements removed, where n is the result of evaluating the rhs expression.", 
      "Type": "binary infix operator",
      "Syntax": "query expression skip expression",
      "Text": 
      [ 
        "The SQL SELECT statement returns a result set of records from one or more tables. A SELECT statement retrieves zero or more rows from one or more database tables or database views. In most applications, SELECT is the most commonly used data manipulation language (DML) command. As SQL is a declarative programming language, SELECT queries specify a result set, but do not specify how to calculate it. The database translates the query into a query plan which may vary between executions, database versions and database software. This functionality is called the query optimizer as it is responsible for finding the best possible execution plan for the query, within applicable constraints. The SQL From clause is the source of a rowset to be operated upon in a Data Manipulation Language (DML) statement. From clauses are very common, and will provide the rowset to be exposed through a Select statement, the source of values in an Update statement, and the target rows to be deleted in a Delete statement.A WHERE clause in SQL specifies that a SQL Data Manipulation Language (DML) statement should only affect rows that meet specified criteria. The criteria are expressed in the form of predicates. WHERE clauses are not mandatory clauses of SQL DML statements, but can be used to limit the number of rows affected by a SQL DML statement or returned by a query. In brief SQL WHERE clause is used to extract only those results from a SQL statement, such as: SELECT, INSERT, UPDATE, or DELETE statement.",
        [
          {
             "id": "c-2735991550",
             "parentId": "CI2XI",
             "value": "10",
             "type": "skip"
          },
          "from 'users' as user\n sort user.name\nskip 10\ntake 10"
        ]
      ]
    }, 
    "Let":
    { 
      "Snippet": "Defines variable", 
      "Summary": "Returns a query expression representing the result of evaluating each the right hand statement for each element.", 
      "Type": "binary infix operator",
      "Syntax": "query expression let statement",
      "Text": 
      [ 
        "The SQL SELECT statement returns a result set of records from one or more tables. A SELECT statement retrieves zero or more rows from one or more database tables or database views. In most applications, SELECT is the most commonly used data manipulation language (DML) command. As SQL is a declarative programming language, SELECT queries specify a result set, but do not specify how to calculate it. The database translates the query into a query plan which may vary between executions, database versions and database software. This functionality is called the query optimizer as it is responsible for finding the best possible execution plan for the query, within applicable constraints. The SQL From clause is the source of a rowset to be operated upon in a Data Manipulation Language (DML) statement. From clauses are very common, and will provide the rowset to be exposed through a Select statement, the source of values in an Update statement, and the target rows to be deleted in a Delete statement.A WHERE clause in SQL specifies that a SQL Data Manipulation Language (DML) statement should only affect rows that meet specified criteria. The criteria are expressed in the form of predicates. WHERE clauses are not mandatory clauses of SQL DML statements, but can be used to limit the number of rows affected by a SQL DML statement or returned by a query. In brief SQL WHERE clause is used to extract only those results from a SQL statement, such as: SELECT, INSERT, UPDATE, or DELETE statement.",
        [
          {
             "id": "c-2735991550",
             "parentId": "CI2XI",
             "field": "x",
             "expression": "100",
             "type": "let"
          },
          "let x = 100;"
        ]
      ]
    },
    "Count":
    { 
      "Snippet": "Number of elements", 
      "Summary": "Returns an the number of elements in the right hand expression", 
      "InDepth": "",
      "Type": " binary prefix operator",
      "Syntax": "count expression",
      "Text": 
      [ 
        "The SQL SELECT statement returns a result set of records from one or more tables. A SELECT statement retrieves zero or more rows from one or more database tables or database views. In most applications, SELECT is the most commonly used data manipulation language (DML) command. As SQL is a declarative programming language, SELECT queries specify a result set, but do not specify how to calculate it. The database translates the query into a query plan which may vary between executions, database versions and database software. This functionality is called the query optimizer as it is responsible for finding the best possible execution plan for the query, within applicable constraints. The SQL From clause is the source of a rowset to be operated upon in a Data Manipulation Language (DML) statement. From clauses are very common, and will provide the rowset to be exposed through a Select statement, the source of values in an Update statement, and the target rows to be deleted in a Delete statement.A WHERE clause in SQL specifies that a SQL Data Manipulation Language (DML) statement should only affect rows that meet specified criteria. The criteria are expressed in the form of predicates. WHERE clauses are not mandatory clauses of SQL DML statements, but can be used to limit the number of rows affected by a SQL DML statement or returned by a query. In brief SQL WHERE clause is used to extract only those results from a SQL statement, such as: SELECT, INSERT, UPDATE, or DELETE statement.",
        [
          {
            "cards": [ {
              "id": "c-2735991550",
              "parentId": "CI2XI",
              "cards": [],
              "filters": [{
                "combinator": 0,
                "condition": {
                  "first": "user.name",
                  "operator": 0,
                  "second": "John"
                },
              "id": "co0.766099087301130"
              }],
              "group": "users",
              "iterator": "user",
              "joins": [],
              "properties": [{
                "property": "*",
                "id": "0.6"
              }],
              "type": "sfw"
            }],
              "id": "c-2735991550",
              "parentId": "CI2XI",
              "type": "count"
            },
            "\ncount (\n\tselect *\n\tfrom 'users' as user\n\twhere user.name == John\n)"
        ]
      ]
    },
     "Min":
    { 
      "Snippet": "Returns minimum element", 
      "Summary": "Returns an the minimum of all elements in the right hand side", 
      "Type": "binary prefix operator",
      "Syntax": "min expression",
      "Text": 
      [ 
        "The syntax for the MIN function in SQL is:",
        [
          {
             "cards": [ {
              "id": "c-2735991550",
              "parentId": "CI2XI",
              "cards": [],
              "filters": [{
                "combinator": 0,
                "condition": {
                  "first": "user.name",
                  "operator": 0,
                  "second": "John"
                },
              "id": "co0.766099087301130"
              }],
              "group": "users",
              "iterator": "user",
              "joins": [],
              "properties": [{
                "property": "*",
                "id": "0.6"
              }],
              "type": "sfw"
            }],
              "id": "c-2735991550",
              "parentId": "CI2XI",
              "type": "min"
          },
          "min();"
        ]
      ]
    },
     "Max":
    { 
      "Snippet": "Returns maximum element", 
      "Summary": "Returns an the maximum of all elements in the right hand side", 
      "Type": "binary prefix operator",
      "Syntax": "max expression",
      "Text": 
      [ 
        "The syntax for the MIN function in SQL is:",
        [
          {
             "cards": [ {
              "id": "c-2735991550",
              "parentId": "CI2XI",
              "cards": [],
              "filters": [{
                "combinator": 0,
                "condition": {
                  "first": "user.name",
                  "operator": 0,
                  "second": "John"
                },
              "id": "co0.766099087301130"
              }],
              "group": "users",
              "iterator": "user",
              "joins": [],
              "properties": [{
                "property": "*",
                "id": "0.6"
              }],
              "type": "sfw"
            }],
              "id": "c-2735991550",
              "parentId": "CI2XI",
              "type": "max"
          },
          "max();"
        ]
      ]
    },
    "Sum":
    { 
      "Snippet": "Returns the sum", 
      "Summary": "Returns an the sum of all elements in the right hand side.", 
      "Type": "binary prefix operator",
      "Syntax": "sum expression",
      "Text": 
      [ 
        "The sum card does not have a description yet."
      ]
    },
    "Avg":
    { 
      "Snippet": "Returns the average", 
      "Summary": "Returns the average of all elements in the right hand side.", 
      "Type": "binary prefix operator",
      "Syntax": "avg expression",
      "Text": 
      [ 
        "The avg card does not have a description yet."
      ]
    }
  },
  {
    "Expression":
    {  
      "Summary": "Testing",
      "Text": "Text would go here Select select Reference Expression expression"
    },
    "Reference":
    {
      "Summary": "Testing",
      "Text": "Text would go here"
    }
  }
]



