[
  {
     "Take":
    { 
      "Snippet": "Returns n results", 
      "Summary": "Returns a query expression representing the first n results from the expression on the left hand side.  The number of results n is the evaluation of the right hand side.", 
      "Type": "binary infix operator",
      "Syntax": "query expression TAKE expression",
      "Text": 
      [ 
        [
          {
            "id": "c-4",
            "type": "take",
            "value": "10",
            "static": 
            {
              "colors": ["#CDCF85", "#F5F6B3"],
              "display": 
              {
                "displayType": 3,
                "key": "value"
              },
              "preview": "[value]",
              "title": "Take"
            }
          },
          "take 10"
        ],
        "Take is a binary infix operator, meaning it sits between two expressions. Take returns a query expression that is the first n results of the query expression on its left hand side.  The number of results n to be returned is determined from the right hand side. In order to get a specific set of results, the data can be sorted based on some parameter first and then the top n results selected via Take. For example, if you wanted the 10 oldest people in a group, you would sort the people based on descending age and then use 'Take 10'.",
        "This example takes the first 10 results (the names of users) from the table 'users.'"
      ]
    }
  },
  {
    "Expression":
    {  
      "Summary": "A TQL expression is any valid combination of expressions and operators that returns a single value.",
      "Text": 
      [ 
        "Examples: ",
        "2",
        "'name'",
        "2+2",
        "3+2*4+func('group')"
      ]
    },
    "Statement":
    {
      "Summary": "All operations performed using TQL statements",
      "Text": 
      [ 
        "A Tql statement is one of: ",
        "- A code block, enclose in curly braces.",
        "- An expression that does not begin with a curly brace.",
        "- A bare semicolon, which is treated as whitespace."
      ]
    },
    "Binary Infix":
    {
      "Summary": "Sits between two expressions",
      "Text": 
      [ 
        "Infix notation is the notation commonly used in arithmetical and logical formulae and statements. It is characterized by the placement of operators between operands – 'infixed operators' – such as the plus sign in '2 + 2'.",
        "In infix notation, unlike in prefix or postfix notations, parentheses surrounding groups of operands and operators are necessary to indicate the intended order in which operations are to be performed. In the absence of parentheses, certain precedence rules determine the order of operations."
      ]
    },
    "Binary Prefix":
    {
      "Summary": "Precedes it's target",
      "Text": 
      [ 
        "You implement a prefix or postfix unary operator by writing the prefix modifier before the func keyword when declaring the operator function."
      ]
    }
  }
]



