[
  {
   "Select / From":
    { 
      "summary": "Retrieves rows from the database if they meet the condition", 
      "type": "none",
      "syntax": "SELECT FROM source WHERE search condition",
      "text": 
      [ 
        "The TQL Select statement returns a result set of records from one or more tables. A Select statement retrieves zero or more rows from one or more database tables or database views. In most applications, Select is the most commonly used data manipulation language (DML) command. As TQL is a declarative programming language, Select queries specify a result set, but do not specify how to calculate it. The database translates the query into a query plan which may vary between executions, database versions and database software. This functionality is called the query optimizer as it is responsible for finding the best possible execution plan for the query, within applicable constraints.",
        "Select all the product id's purchased by user 1234:"
      ]
    },
    "Take":
    { 
      "snippet": "Returns n results", 
      "summary": "Returns a query expression representing the first n results from the expression on the left hand side.  The number of results n is the evaluation of the right hand side.", 
      "notation": "binary infix operator",
      "syntax": "query expression TAKE expression",
      "text": 
      [ 
        [
          {
            "type": "take",
            "value": "10",
            "id": "1"
          },
          "take 10"
        ],
        "Take is a binary infix operator, meaning it sits between two expressions. Take returns a query expression that is the first n results of the query expression on its left hand side.  The number of results n to be returned is determined from the right hand side. In order to get a specific set of results, the data can be sorted based on some parameter first and then the top n results selected via Take. For example, if you wanted the 10 oldest people in a group, you would sort the people based on descending age and then use 'Take 10'.",
        "This example takes the first 10 results (the names of users) from the table 'users.'",
        [
          {
            "cards": [
              {
                "type": "take",
                "value": 10,
                "id": "a"
              }
            ],
            "fields": [
              { 
                "type": "field",
                "field": "user.name",
                "id": "b"
              }
            ],
            "filters": [
              { 
                "combinator": 0,
                "first": "user.name",
                "operator": 0,
                "second": "John",
                "type": "filterBlock",
                "id": "c"
              }
            ],
            "tables": [
            {
              "iterator": "user",
              "table": "users",
              "type": "table",
              "id": "d"
            }
            ],
            "type": "sfw",
            "id": "e"
          },
          "SELECT user.name\nFROM 'users' as user\nWHERE user.name == John\ntake 10;"
        ]
      ]
    },
    "Sort":
    { 
      "snippet": "none", 
      "summary": "Returns a query expression representing the result of sorting the left-hand expression in ascending order of the value returned by the right-hand expression.",
      "notation": "binary infix operator",
      "syntax": "query expression sort expression",
      "text": 
      [ 
        "from 'users' as user sort user.name"
      ]
    },
    "Filter":
    { 
      "snippet": "none", 
      "summary": "none",
      "notation": "none",
      "syntax": "none",
      "text": 
      [ 
        "none"
      ]
    },
    "Let":
    { 
      "snippet": "Defines variable", 
      "summary": "Returns a query expression representing the result of evaluating each the right hand statement for each element.", 
      "type": "binary infix operator",
      "syntax": "query expression LET statement",
      "text": 
      [ 
        "none"
      ]
    },
    "Var":
    { 
      "snippet": "none", 
      "summary": "none",
      "notation": "none",
      "syntax": "none",
      "text": 
      [ 
        "none"
      ]
    },
    "Score":
    { 
      "snippet": "none", 
      "summary": "none",
      "notation": "none",
      "syntax": "none",
      "text": 
      [ 
        "none"
      ]
    },
    "Transform":
    { 
      "snippet": "none", 
      "summary": "none",
      "notation": "none",
      "syntax": "none",
      "text": 
      [ 
        "none"
      ]
    },
    "Count":
    { 
      "snippet": "Number of elements", 
      "summary": "Returns an the number of elements in the right hand expression", 
      "type": " binary prefix operator",
      "syntax": "COUNT expression",
      "text": 
      [ 
        "none"
      ]
    },
    "Average":
    { 
      "snippet": "Returns the average", 
      "summary": "Returns the average of all elements in the right hand side.", 
      "type": "binary prefix operator",
      "syntax": "AVG expression",
      "text": 
      [ 
        "none"
      ]
    },
    "Sum":
    { 
      "snippet": "Returns the sum", 
      "summary": "Returns an the sum of all elements in the right hand side.", 
      "type": "binary prefix operator",
      "syntax": "SUM expression",
      "text": 
      [ 
        "none"
      ]
    },
    "Min":
    { 
      "snippet": "Returns minimum element", 
      "summary": "Returns an the minimum of all elements in the right hand side", 
      "type": "binary prefix operator",
      "syntax": "MIN expression",
      "text": 
      [ 
        "none"
      ]
    },
    "Max":
    { 
      "snippet": "Returns maximum element", 
      "summary": "Returns an the maximum of all elements in the right hand side", 
      "type": "binary prefix operator",
      "syntax": "MAX expression",
      "text": 
      [ 
        "none"
      ]
    },
    "Exists":
    { 
      "snippet": "none", 
      "summary": "none",
      "notation": "none",
      "syntax": "none",
      "text": 
      [ 
        "none"
      ]
    },
    "( )":
    { 
      "snippet": "none", 
      "summary": "none",
      "notation": "none",
      "syntax": "none",
      "text": 
      [ 
        "none"
      ]
    },
    "Comparison":
    { 
      "snippet": "none", 
      "summary": "none",
      "notation": "none",
      "syntax": "none",
      "text": 
      [ 
        "none"
      ]
    },
    "Skip":
    { 
      "snippet": "Removes first n elements", 
      "summary": "Returns a query expression representing the left-hand query expression, with the first n elements removed, where n is the result of evaluating the right-hand expression.", 
      "type": "binary infix operator",
      "syntax": "query expression SKIP expression (n)",
      "text": 
      [ 
        "none"
      ]
    }
  }
]