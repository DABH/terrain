SELECT DISTINCT u.uid as bb_uid, u.total_point
FROM usprofile_babysitter u
INNER JOIN usprofile u2 ON u.uid = u2.uid
INNER JOIN users u3 ON u.uid = u3.uid
INNER JOIN babysitter_location bl ON u.uid = bl.babysitter_uid
INNER JOIN us_location b_l ON bl.location_id = b_l.id AND b_l.name = :city AND b_l.state = :state
WHERE (u.max_kids IS NULL OR u.max_kids = 0 OR u.max_kids >= 1)
AND (u.hidden_flag = 0 AND u3.status > 0)
// 2) if start/end datetime is provided, filter list to only include sitters that are available:
// 2a) Only include sitters that have availability for the specified time:

SELECT b.babysitter_uid as uid
FROM booking_availability b
WHERE (
b.recur_until IS NULL
AND b.start_date <= :dt_start
AND b.end_date >= :dt_end
)
// 2b) Filter out sitters that are already committed to that time:

SELECT
babysitter_uid as uid
FROM
booking
WHERE
(status IN('accepted', 'pending') AND start_date < :ending AND end_date > :beginning) OR
(status IN('parent_reschedule', 'sitter_reschedule') AND proposed_start_date < :ending AND proposed_end_date > :beginning)
// 3) Filter out sitters by existing families only flag:

SELECT
DISTINCT u.uid
FROM usprofile_babysitter u
LEFT OUTER JOIN us_social_graph_cache gc ON gc.uid = :parent_uid
AND (gc.action = 'Booked' OR gc.action = 'Reviewed') AND gc.friend_uid = u.uid
INNER JOIN babysitter_location bl ON u.uid = bl.babysitter_uid
INNER JOIN us_location b_l ON bl.location_id = b_l.id
AND b_l.name = :city AND b_l.state = :state
WHERE
u.accept_existing_parents_only <> 0 AND gc.action IS NULL
// 4) Filter out sitters whom parent has negatively reviewed:

SELECT
DISTINCT babysitter_uid AS uid
FROM parent_review
WHERE parent_uid = :parent_uid
AND vote < 60
// 5) If specified, filter bookmarked sitters only:

SELECT DISTINCT babysitter_uid AS uid
FROM babysitter_bookmark
WHERE parent_uid = :parent_uid
AND bookmark_type = :type

// 6) Use resulting list of bb_uid values ($uidsStr below) to get sitter point values:
SELECT
bp.uid as bb_uid,
bp.uid as uid,
u.access,
IF (
(
SUM( IF(gs.grouping_id = 1 AND gs.points_sum >= pt.point_threshold, 1, 0)) +
SUM( IF(gs.grouping_id = 2 AND gs.points_sum >= pt.point_threshold, 1, 0)) +
SUM( IF(gs.grouping_id = 3 AND gs.points_sum >= pt.point_threshold, 1, 0)) +
SUM( IF(gs.grouping_id = 4 AND gs.points_sum >= pt.point_threshold, 1, 0))
) = 4, 1, 0
) as tier,
group_concat(gs.grouping_id) as point_group_ids,
group_concat(gs.points_sum) as point_sums,
group_concat(pt.grouping_id) as threshold_group_ids,
group_concat(pt.point_threshold) as point_thresholds,
bp.total_point
FROM usprofile_babysitter bp
INNER JOIN users u ON u.uid = bp.uid
LEFT JOIN us_sitter_point_grouping_sum gs ON gs.sitter_uid = bp.uid
LEFT JOIN us_search_context_grouping_threshold pt ON pt.grouping_id = gs.grouping_id
AND pt.search_context_id = :context_id
WHERE u.uid IN ($uidsStr)
GROUP BY bp.uid
ORDER BY bp.total_point DESC