// Copyright 2017 Terrain Data, Inc.

// tslint:disable:restrict-plus-operands

import * as Immutable from 'immutable';
import { List, Map } from 'immutable';
import * as _ from 'lodash';

import { Colors, getCardColors } from '../../../app/common/Colors';
import MapComponent from '../../../app/common/components/MapComponent';
import * as BlockUtils from '../../../blocks/BlockUtils';
import { DisplayType } from '../../../blocks/displays/Display';
import { _block, Block, TQLTranslationFn } from '../../../blocks/types/Block';
import { _card } from '../../../blocks/types/Card';
import { AutocompleteMatchType, ElasticBlockHelpers } from '../../../database/elastic/blocks/ElasticBlockHelpers';

const esMapDistanceUnits = {
  mi: 'miles',
  yd: 'yards',
  ft: 'feet',
  in: 'inches',
  km: 'kilometers',
  m: 'meters',
  cm: 'centimeters',
  mm: 'millimeters',
  nmi: 'nautical miles',
};

const esMapDistanceTypes = [
  'arc',
  'plane',
];

export const elasticDistance = _card({

  distance: 0,
  key: 'geo_distance',
  field: 'location',
  distanceUnit: 'mi',
  distanceType: 'arc',
  geopoint: [-35, 120],
  map_text: '',

  static: {
    language: 'elastic',
    title: 'Geo Distance',
    description: 'Terrain\'s custom card for filtering results by distance to a geo_point.',
    colors: getCardColors('filter', Colors().builder.cards.structureClause),
    preview: 'Geo Distance',

    tql: (block: Block, tqlTranslationFn: TQLTranslationFn, tqlConfig: object) =>
    {
      // TODO Geo point needs to coordinate with what is in map ...
      return {
        distance: (block['distance']).toString() + block['distanceUnit'],
        distance_type: block['distanceType'],
        [block['field']]: {
          lat: block['geopoint'][0],
          lon: block['geopoint'][1],
        },
      };
    },

    display:
    [
      {
        displayType: DisplayType.FLEX,
        key: 'distance_flex',
        flex:
        [
          {
            displayType: DisplayType.LABEL,
            key: 'distance_label',
            label: 'Distance:',
          },
          {
            displayType: DisplayType.NUM,
            key: 'distance',
            placeholder: 'distance',
            style: {
              maxWidth: 110,
              minWidth: 75,
              marginLeft: 6,
              marginBottom: 6,
            },
          },
          {
            displayType: DisplayType.DROPDOWN,
            key: 'distanceUnit',
            options: List(_.keys(esMapDistanceUnits)),
            optionsDisplayName: Immutable.Map<any, string>(esMapDistanceUnits) as any,
            dropdownUsesRawValues: true,
            autoDisabled: true,
            centerDropdown: true,
            style: {
              maxWidth: 125,
              minWidth: 95,
              marginLeft: 6,
              marginRight: 6,
            },
          },
          {
            displayType: DisplayType.LABEL,
            key: 'distance_type_label',
            label: 'Distance Type:',
            style: {
              minWidth: 97,
            },
          },
          {
            displayType: DisplayType.DROPDOWN,
            key: 'distanceType',
            options: List(esMapDistanceTypes),
            dropdownUsesRawValues: true,
            autoDisabled: true,
            centerDropdown: true,
            style: {
              maxWidth: 95,
              minWidth: 75,
              marginLeft: 6,
            },
          },
        ],
      },
      {
        displayType: DisplayType.TEXT,
        key: 'field',
        placeholder: 'Field',
        className: 'builder-comp-list-item-margin-bottom',
        getAutoTerms: (schemaState): List<string> =>
        {
          return ElasticBlockHelpers.autocompleteMatches(schemaState, AutocompleteMatchType.Field);
        },
      },
      {
        displayType: DisplayType.MAP,
        key: 'geopoint',
        component: MapComponent,
      },
    ],
  },
});

export default elasticDistance;
